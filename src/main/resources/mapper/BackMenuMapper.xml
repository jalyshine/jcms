<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.jaly.admin.dao.BackMenuMapper">

    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>-->

    <resultMap id="BaseResultMap" type="cn.jaly.admin.entity.BackMenu">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="icon" jdbcType="VARCHAR" property="icon"/>
        <result column="module" jdbcType="VARCHAR" property="module"/>
        <result column="entity" jdbcType="VARCHAR" property="entity"/>
        <result column="action" jdbcType="VARCHAR" property="action"/>
        <result column="data" jdbcType="VARCHAR" property="data"/>
        <result column="list_order" jdbcType="INTEGER" property="listOrder"/>
        <result column="display" jdbcType="BIT" property="display"/>
        <result column="depth" jdbcType="TINYINT" property="depth"/>
        <result column="path" jdbcType="VARCHAR" property="path"/>
        <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, name, icon, module, entity, action, data, list_order, display, depth, path, parent_id
  </sql>
    <select id="selectByExample" parameterType="cn.jaly.admin.entity.BackMenuExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from back_menu
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from back_menu
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" flushCache="true" parameterType="java.lang.Integer">
    delete from back_menu
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenuExample">
        delete from back_menu
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
    insert into back_menu (id, name, icon, 
      module, entity, action, 
      data, list_order, display, 
      depth, path, parent_id
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{icon,jdbcType=VARCHAR}, 
      #{module,jdbcType=VARCHAR}, #{entity,jdbcType=VARCHAR}, #{action,jdbcType=VARCHAR}, 
      #{data,jdbcType=VARCHAR}, #{listOrder,jdbcType=INTEGER}, #{display,jdbcType=BIT}, 
      #{depth,jdbcType=TINYINT}, #{path,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
        insert into back_menu
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="icon != null">
                icon,
            </if>
            <if test="module != null">
                module,
            </if>
            <if test="entity != null">
                entity,
            </if>
            <if test="action != null">
                action,
            </if>
            <if test="data != null">
                data,
            </if>
            <if test="listOrder != null">
                list_order,
            </if>
            <if test="display != null">
                display,
            </if>
            <if test="depth != null">
                depth,
            </if>
            <if test="path != null">
                path,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="icon != null">
                #{icon,jdbcType=VARCHAR},
            </if>
            <if test="module != null">
                #{module,jdbcType=VARCHAR},
            </if>
            <if test="entity != null">
                #{entity,jdbcType=VARCHAR},
            </if>
            <if test="action != null">
                #{action,jdbcType=VARCHAR},
            </if>
            <if test="data != null">
                #{data,jdbcType=VARCHAR},
            </if>
            <if test="listOrder != null">
                #{listOrder,jdbcType=INTEGER},
            </if>
            <if test="display != null">
                #{display,jdbcType=BIT},
            </if>
            <if test="depth != null">
                #{depth,jdbcType=TINYINT},
            </if>
            <if test="path != null">
                #{path,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.jaly.admin.entity.BackMenuExample" resultType="java.lang.Long">
        select count(*) from back_menu
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" flushCache="true" parameterType="map">
        update back_menu
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.icon != null">
                icon = #{record.icon,jdbcType=VARCHAR},
            </if>
            <if test="record.module != null">
                module = #{record.module,jdbcType=VARCHAR},
            </if>
            <if test="record.entity != null">
                entity = #{record.entity,jdbcType=VARCHAR},
            </if>
            <if test="record.action != null">
                action = #{record.action,jdbcType=VARCHAR},
            </if>
            <if test="record.data != null">
                data = #{record.data,jdbcType=VARCHAR},
            </if>
            <if test="record.listOrder != null">
                list_order = #{record.listOrder,jdbcType=INTEGER},
            </if>
            <if test="record.display != null">
                display = #{record.display,jdbcType=BIT},
            </if>
            <if test="record.depth != null">
                depth = #{record.depth,jdbcType=TINYINT},
            </if>
            <if test="record.path != null">
                path = #{record.path,jdbcType=VARCHAR},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" flushCache="true" parameterType="map">
        update back_menu
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        icon = #{record.icon,jdbcType=VARCHAR},
        module = #{record.module,jdbcType=VARCHAR},
        entity = #{record.entity,jdbcType=VARCHAR},
        action = #{record.action,jdbcType=VARCHAR},
        data = #{record.data,jdbcType=VARCHAR},
        list_order = #{record.listOrder,jdbcType=INTEGER},
        display = #{record.display,jdbcType=BIT},
        depth = #{record.depth,jdbcType=TINYINT},
        path = #{record.path,jdbcType=VARCHAR},
        parent_id = #{record.parentId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
        update back_menu
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="icon != null">
                icon = #{icon,jdbcType=VARCHAR},
            </if>
            <if test="module != null">
                module = #{module,jdbcType=VARCHAR},
            </if>
            <if test="entity != null">
                entity = #{entity,jdbcType=VARCHAR},
            </if>
            <if test="action != null">
                action = #{action,jdbcType=VARCHAR},
            </if>
            <if test="data != null">
                data = #{data,jdbcType=VARCHAR},
            </if>
            <if test="listOrder != null">
                list_order = #{listOrder,jdbcType=INTEGER},
            </if>
            <if test="display != null">
                display = #{display,jdbcType=BIT},
            </if>
            <if test="depth != null">
                depth = #{depth,jdbcType=TINYINT},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
    update back_menu
    set name = #{name,jdbcType=VARCHAR},
      icon = #{icon,jdbcType=VARCHAR},
      module = #{module,jdbcType=VARCHAR},
      entity = #{entity,jdbcType=VARCHAR},
      action = #{action,jdbcType=VARCHAR},
      data = #{data,jdbcType=VARCHAR},
      list_order = #{listOrder,jdbcType=INTEGER},
      display = #{display,jdbcType=BIT},
      depth = #{depth,jdbcType=TINYINT},
      path = #{path,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <!--自定义-->
    <update id="batchUpdateListOrder" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
        insert into back_menu (id,list_order) values
        <foreach item="item" collection="records" separator=",">
            (#{item.id},#{item.listOrder})
        </foreach>
        on duplicate key update list_order=values(list_order)
    </update>
    <update id="batchUpdatePathAndDepth" flushCache="true" parameterType="cn.jaly.admin.entity.BackMenu">
        insert into back_menu (id,depth,path) values
        <foreach item="item" collection="records" separator=",">
            (#{item.id},#{item.depth},#{item.path})
        </foreach>
        on duplicate key update depth=values(depth), path=values(path)
    </update>
</mapper>