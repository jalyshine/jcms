<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.jaly.member.dao.MemberSettingMapper">

    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

  <resultMap id="BaseResultMap" type="cn.jaly.member.entity.MemberSetting">
    <id column="site_id" jdbcType="INTEGER" property="siteId" />
    <result column="allow_reg" jdbcType="BIT" property="allowReg" />
    <result column="select_model" jdbcType="BIT" property="selectModel" />
    <result column="need_email" jdbcType="BIT" property="needEmail" />
    <result column="need_code" jdbcType="BIT" property="needCode" />
    <result column="need_phone" jdbcType="BIT" property="needPhone" />
    <result column="need_admin" jdbcType="BIT" property="needAdmin" />
    <result column="integral_model" jdbcType="BIT" property="integralModel" />
    <result column="integral_price" jdbcType="REAL" property="integralPrice" />
    <result column="init_point" jdbcType="INTEGER" property="initPoint" />
    <result column="init_money" jdbcType="REAL" property="initMoney" />
    <result column="show_agree" jdbcType="BIT" property="showAgree" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.jaly.member.entity.MemberSettingWithBLOBs">
    <result column="reg_agree" jdbcType="LONGVARCHAR" property="regAgree" />
    <result column="email_verify" jdbcType="LONGVARCHAR" property="emailVerify" />
    <result column="email_password" jdbcType="LONGVARCHAR" property="emailPassword" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    site_id, allow_reg, select_model, need_email, need_code, need_phone, need_admin, 
    integral_model, integral_price, init_point, init_money, show_agree
  </sql>
  <sql id="Blob_Column_List">
    reg_agree, email_verify, email_password
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.jaly.member.entity.MemberSettingExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.jaly.member.entity.MemberSettingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_setting
    where site_id = #{siteId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member_setting
    where site_id = #{siteId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.jaly.member.entity.MemberSettingExample">
    delete from member_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.jaly.member.entity.MemberSettingWithBLOBs">
    insert into member_setting (site_id, allow_reg, select_model, 
      need_email, need_code, need_phone, 
      need_admin, integral_model, integral_price, 
      init_point, init_money, show_agree, 
      reg_agree, email_verify, email_password
      )
    values (#{siteId,jdbcType=INTEGER}, #{allowReg,jdbcType=BIT}, #{selectModel,jdbcType=BIT}, 
      #{needEmail,jdbcType=BIT}, #{needCode,jdbcType=BIT}, #{needPhone,jdbcType=BIT}, 
      #{needAdmin,jdbcType=BIT}, #{integralModel,jdbcType=BIT}, #{integralPrice,jdbcType=REAL}, 
      #{initPoint,jdbcType=INTEGER}, #{initMoney,jdbcType=REAL}, #{showAgree,jdbcType=BIT}, 
      #{regAgree,jdbcType=LONGVARCHAR}, #{emailVerify,jdbcType=LONGVARCHAR}, #{emailPassword,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.jaly.member.entity.MemberSettingWithBLOBs">
    insert into member_setting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="siteId != null">
        site_id,
      </if>
      <if test="allowReg != null">
        allow_reg,
      </if>
      <if test="selectModel != null">
        select_model,
      </if>
      <if test="needEmail != null">
        need_email,
      </if>
      <if test="needCode != null">
        need_code,
      </if>
      <if test="needPhone != null">
        need_phone,
      </if>
      <if test="needAdmin != null">
        need_admin,
      </if>
      <if test="integralModel != null">
        integral_model,
      </if>
      <if test="integralPrice != null">
        integral_price,
      </if>
      <if test="initPoint != null">
        init_point,
      </if>
      <if test="initMoney != null">
        init_money,
      </if>
      <if test="showAgree != null">
        show_agree,
      </if>
      <if test="regAgree != null">
        reg_agree,
      </if>
      <if test="emailVerify != null">
        email_verify,
      </if>
      <if test="emailPassword != null">
        email_password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="siteId != null">
        #{siteId,jdbcType=INTEGER},
      </if>
      <if test="allowReg != null">
        #{allowReg,jdbcType=BIT},
      </if>
      <if test="selectModel != null">
        #{selectModel,jdbcType=BIT},
      </if>
      <if test="needEmail != null">
        #{needEmail,jdbcType=BIT},
      </if>
      <if test="needCode != null">
        #{needCode,jdbcType=BIT},
      </if>
      <if test="needPhone != null">
        #{needPhone,jdbcType=BIT},
      </if>
      <if test="needAdmin != null">
        #{needAdmin,jdbcType=BIT},
      </if>
      <if test="integralModel != null">
        #{integralModel,jdbcType=BIT},
      </if>
      <if test="integralPrice != null">
        #{integralPrice,jdbcType=REAL},
      </if>
      <if test="initPoint != null">
        #{initPoint,jdbcType=INTEGER},
      </if>
      <if test="initMoney != null">
        #{initMoney,jdbcType=REAL},
      </if>
      <if test="showAgree != null">
        #{showAgree,jdbcType=BIT},
      </if>
      <if test="regAgree != null">
        #{regAgree,jdbcType=LONGVARCHAR},
      </if>
      <if test="emailVerify != null">
        #{emailVerify,jdbcType=LONGVARCHAR},
      </if>
      <if test="emailPassword != null">
        #{emailPassword,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.jaly.member.entity.MemberSettingExample" resultType="java.lang.Long">
    select count(*) from member_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member_setting
    <set>
      <if test="record.siteId != null">
        site_id = #{record.siteId,jdbcType=INTEGER},
      </if>
      <if test="record.allowReg != null">
        allow_reg = #{record.allowReg,jdbcType=BIT},
      </if>
      <if test="record.selectModel != null">
        select_model = #{record.selectModel,jdbcType=BIT},
      </if>
      <if test="record.needEmail != null">
        need_email = #{record.needEmail,jdbcType=BIT},
      </if>
      <if test="record.needCode != null">
        need_code = #{record.needCode,jdbcType=BIT},
      </if>
      <if test="record.needPhone != null">
        need_phone = #{record.needPhone,jdbcType=BIT},
      </if>
      <if test="record.needAdmin != null">
        need_admin = #{record.needAdmin,jdbcType=BIT},
      </if>
      <if test="record.integralModel != null">
        integral_model = #{record.integralModel,jdbcType=BIT},
      </if>
      <if test="record.integralPrice != null">
        integral_price = #{record.integralPrice,jdbcType=REAL},
      </if>
      <if test="record.initPoint != null">
        init_point = #{record.initPoint,jdbcType=INTEGER},
      </if>
      <if test="record.initMoney != null">
        init_money = #{record.initMoney,jdbcType=REAL},
      </if>
      <if test="record.showAgree != null">
        show_agree = #{record.showAgree,jdbcType=BIT},
      </if>
      <if test="record.regAgree != null">
        reg_agree = #{record.regAgree,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.emailVerify != null">
        email_verify = #{record.emailVerify,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.emailPassword != null">
        email_password = #{record.emailPassword,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update member_setting
    set site_id = #{record.siteId,jdbcType=INTEGER},
      allow_reg = #{record.allowReg,jdbcType=BIT},
      select_model = #{record.selectModel,jdbcType=BIT},
      need_email = #{record.needEmail,jdbcType=BIT},
      need_code = #{record.needCode,jdbcType=BIT},
      need_phone = #{record.needPhone,jdbcType=BIT},
      need_admin = #{record.needAdmin,jdbcType=BIT},
      integral_model = #{record.integralModel,jdbcType=BIT},
      integral_price = #{record.integralPrice,jdbcType=REAL},
      init_point = #{record.initPoint,jdbcType=INTEGER},
      init_money = #{record.initMoney,jdbcType=REAL},
      show_agree = #{record.showAgree,jdbcType=BIT},
      reg_agree = #{record.regAgree,jdbcType=LONGVARCHAR},
      email_verify = #{record.emailVerify,jdbcType=LONGVARCHAR},
      email_password = #{record.emailPassword,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member_setting
    set site_id = #{record.siteId,jdbcType=INTEGER},
      allow_reg = #{record.allowReg,jdbcType=BIT},
      select_model = #{record.selectModel,jdbcType=BIT},
      need_email = #{record.needEmail,jdbcType=BIT},
      need_code = #{record.needCode,jdbcType=BIT},
      need_phone = #{record.needPhone,jdbcType=BIT},
      need_admin = #{record.needAdmin,jdbcType=BIT},
      integral_model = #{record.integralModel,jdbcType=BIT},
      integral_price = #{record.integralPrice,jdbcType=REAL},
      init_point = #{record.initPoint,jdbcType=INTEGER},
      init_money = #{record.initMoney,jdbcType=REAL},
      show_agree = #{record.showAgree,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.jaly.member.entity.MemberSettingWithBLOBs">
    update member_setting
    <set>
      <if test="allowReg != null">
        allow_reg = #{allowReg,jdbcType=BIT},
      </if>
      <if test="selectModel != null">
        select_model = #{selectModel,jdbcType=BIT},
      </if>
      <if test="needEmail != null">
        need_email = #{needEmail,jdbcType=BIT},
      </if>
      <if test="needCode != null">
        need_code = #{needCode,jdbcType=BIT},
      </if>
      <if test="needPhone != null">
        need_phone = #{needPhone,jdbcType=BIT},
      </if>
      <if test="needAdmin != null">
        need_admin = #{needAdmin,jdbcType=BIT},
      </if>
      <if test="integralModel != null">
        integral_model = #{integralModel,jdbcType=BIT},
      </if>
      <if test="integralPrice != null">
        integral_price = #{integralPrice,jdbcType=REAL},
      </if>
      <if test="initPoint != null">
        init_point = #{initPoint,jdbcType=INTEGER},
      </if>
      <if test="initMoney != null">
        init_money = #{initMoney,jdbcType=REAL},
      </if>
      <if test="showAgree != null">
        show_agree = #{showAgree,jdbcType=BIT},
      </if>
      <if test="regAgree != null">
        reg_agree = #{regAgree,jdbcType=LONGVARCHAR},
      </if>
      <if test="emailVerify != null">
        email_verify = #{emailVerify,jdbcType=LONGVARCHAR},
      </if>
      <if test="emailPassword != null">
        email_password = #{emailPassword,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where site_id = #{siteId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.jaly.member.entity.MemberSettingWithBLOBs">
    update member_setting
    set allow_reg = #{allowReg,jdbcType=BIT},
      select_model = #{selectModel,jdbcType=BIT},
      need_email = #{needEmail,jdbcType=BIT},
      need_code = #{needCode,jdbcType=BIT},
      need_phone = #{needPhone,jdbcType=BIT},
      need_admin = #{needAdmin,jdbcType=BIT},
      integral_model = #{integralModel,jdbcType=BIT},
      integral_price = #{integralPrice,jdbcType=REAL},
      init_point = #{initPoint,jdbcType=INTEGER},
      init_money = #{initMoney,jdbcType=REAL},
      show_agree = #{showAgree,jdbcType=BIT},
      reg_agree = #{regAgree,jdbcType=LONGVARCHAR},
      email_verify = #{emailVerify,jdbcType=LONGVARCHAR},
      email_password = #{emailPassword,jdbcType=LONGVARCHAR}
    where site_id = #{siteId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.jaly.member.entity.MemberSetting">
    update member_setting
    set allow_reg = #{allowReg,jdbcType=BIT},
      select_model = #{selectModel,jdbcType=BIT},
      need_email = #{needEmail,jdbcType=BIT},
      need_code = #{needCode,jdbcType=BIT},
      need_phone = #{needPhone,jdbcType=BIT},
      need_admin = #{needAdmin,jdbcType=BIT},
      integral_model = #{integralModel,jdbcType=BIT},
      integral_price = #{integralPrice,jdbcType=REAL},
      init_point = #{initPoint,jdbcType=INTEGER},
      init_money = #{initMoney,jdbcType=REAL},
      show_agree = #{showAgree,jdbcType=BIT}
    where site_id = #{siteId,jdbcType=INTEGER}
  </update>
</mapper>